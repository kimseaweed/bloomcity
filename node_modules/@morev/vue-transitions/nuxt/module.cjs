'use strict';

const node_fs = require('node:fs');
const node_url = require('node:url');
const node_path = require('node:path');
const utils = require('@morev/utils');
const kit = require('@nuxt/kit');

var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
const __dirname$1 = node_path.dirname(node_url.fileURLToPath((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('module.cjs', document.baseURI).href))));
const COMPONENTS = ["TransitionExpand", "TransitionFade", "TransitionScale", "TransitionSlide"];
const BABEL_PLUGIN_NAME = "@babel/plugin-transform-logical-assignment-operators";
const SCOPE = "@morev";
const MODULE_NAME = `${SCOPE}/vue-transitions`;
const module$1 = kit.defineNuxtModule({
  meta: {
    name: `${MODULE_NAME}/nuxt`,
    configKey: "vueTransitions",
    compatibility: {
      nuxt: ">= 2.17.0 || >=3.5.0"
    }
  },
  defaults: {
    componentDefaultProps: {},
    defaultProps: {}
  },
  async setup(options, nuxt) {
    var _a, _b;
    const NODE_MODULES_PATH = __dirname$1.replace(new RegExp(`${SCOPE}.*`), "");
    const COMPONENTS_DIRECTORY = node_path.join(NODE_MODULES_PATH, ".vue-transitions");
    const resolver = kit.createResolver((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('module.cjs', document.baseURI).href)));
    (_a = nuxt.options).css ?? (_a.css = []);
    nuxt.options.css.push(`${MODULE_NAME}/styles`);
    if (kit.isNuxt2()) {
      nuxt.options.build.transpile.push("@morev/utils", "ohash", MODULE_NAME);
      (_b = nuxt.options.build.babel).plugins ?? (_b.plugins = []);
      const doesBabelPluginExists = nuxt.options.build.babel.plugins.some((plugin) => {
        return utils.isArray(plugin) ? plugin[0] === BABEL_PLUGIN_NAME : plugin === BABEL_PLUGIN_NAME;
      });
      !doesBabelPluginExists && nuxt.options.build.babel.plugins.push(BABEL_PLUGIN_NAME);
    }
    const templateContents = node_fs.readFileSync(resolver.resolve("template.vue"), { encoding: "utf8" });
    try {
      node_fs.existsSync(COMPONENTS_DIRECTORY) && node_fs.unlinkSync(COMPONENTS_DIRECTORY);
    } catch {
    }
    node_fs.mkdirSync(COMPONENTS_DIRECTORY, { recursive: true });
    COMPONENTS.forEach((componentName) => {
      const customProps = utils.mergeObjects(
        options.defaultProps ?? {},
        options.componentDefaultProps?.[componentName]
      );
      const propsDeclaration = utils.isEmpty(customProps) ? "$attrs" : JSON.stringify(customProps).replace(/}$/, ",...$$attrs}").replaceAll('"', "'");
      node_fs.writeFileSync(
        node_path.join(COMPONENTS_DIRECTORY, `${componentName}.vue`),
        templateContents.replaceAll("<%= options.propsDeclaration %>", propsDeclaration).replaceAll("<%= options.listenersDeclaration %>", kit.isNuxt2() ? ' v-on="$listeners"' : "").replaceAll("<%= options.componentName %>", componentName)
      );
    });
    kit.addComponentsDir({
      path: COMPONENTS_DIRECTORY,
      pathPrefix: false,
      watch: false
    });
  }
});

module.exports = module$1;
