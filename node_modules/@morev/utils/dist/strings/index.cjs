"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/strings/index.ts
var strings_exports = {};
__export(strings_exports, {
  camelCase: () => camelCase,
  capitalize: () => capitalize,
  escapeRegExp: () => escapeRegExp,
  fileExtension: () => fileExtension,
  formatSlashes: () => formatSlashes,
  kebabCase: () => kebabCase,
  padEnd: () => padEnd,
  padStart: () => padStart,
  pascalCase: () => pascalCase,
  quote: () => quote,
  randomString: () => randomString,
  romanize: () => romanize,
  snakeCase: () => snakeCase,
  stripIndent: () => stripIndent,
  unquote: () => unquote
});
module.exports = __toCommonJS(strings_exports);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/guards/is-integer/is-integer.ts
var isInteger = (value) => Number.isInteger(value);

// src/strings/camel-case/camel-case.ts
var UPPERCASE = /\p{Lu}/u;
var LOWERCASE = /\p{Ll}/u;
var LEADING_CAPITAL = /^\p{Lu}(?!\p{Lu})/gu;
var IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
var SEPARATORS = /[ \-._]+/;
var LEADING_SEPARATORS = new RegExp(`^${SEPARATORS.source}`);
var SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, "gu");
var NUMBERS_AND_IDENTIFIER = new RegExp(`\\d+${IDENTIFIER.source}`, "gu");
var defaultOptions = {
  preserveConsecutiveUppercase: false
};
var preserveCamelCase = (string) => {
  let isLastCharLower = false;
  let isLastCharUpper = false;
  let isLastLastCharUpper = false;
  for (let i = 0; i < string.length; i++) {
    const character = string[i];
    if (isLastCharLower && UPPERCASE.test(character)) {
      string = `${string.slice(0, i)}-${string.slice(i)}`;
      isLastCharLower = false;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = true;
      i++;
    } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
      string = `${string.slice(0, i - 1)}-${string.slice(i - 1)}`;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = false;
      isLastCharLower = true;
    } else {
      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
    }
  }
  return string;
};
var preserveConsecutiveUppercase = (input) => {
  LEADING_CAPITAL.lastIndex = 0;
  return input.replaceAll(LEADING_CAPITAL, (m1) => m1.toLowerCase());
};
var postProcess = (input) => {
  SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
  NUMBERS_AND_IDENTIFIER.lastIndex = 0;
  return input.replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier) => identifier.toUpperCase()).replaceAll(NUMBERS_AND_IDENTIFIER, (m) => m.toUpperCase());
};
var camelCase = (input, options) => {
  if (!isArray(!input) && !isString(input)) {
    throw new TypeError("Expected the input to be `string | string[]`");
  }
  options = { ...defaultOptions, ...options };
  input = isArray(input) ? input.map((v) => v.trim()).filter(Boolean).join("-") : input.trim();
  if (!input.length)
    return "";
  if (input.length === 1)
    return input.toLowerCase();
  if (input !== input.toLowerCase()) {
    input = preserveCamelCase(input);
  }
  input = input.replace(LEADING_SEPARATORS, "");
  input = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input) : input.toLowerCase();
  return postProcess(input);
};

// src/strings/capitalize/capitalize.ts
var capitalize = (input) => {
  if (!input.length)
    return "";
  return input[0].toUpperCase() + input.slice(1);
};

// src/strings/escape-reg-exp/escape-reg-exp.ts
var escapeRegExp = (str) => (str ?? "").replaceAll(/[$()*+.?[\\\]^{|}]/g, "\\$&");

// src/strings/file-extension/file-extension.ts
var fileExtension = (input) => {
  const basePath = input.split(/[/\\]/).pop();
  return basePath.slice((Math.max(0, basePath.lastIndexOf(".")) || Infinity) + 1) || null;
};

// src/strings/format-slashes/format-slashes.ts
var formatSlashes = (input, options) => {
  input = input.replaceAll(/([^:]\/)\/+/g, "$1").replaceAll(/\\{2,}/g, "\\");
  if (options?.to) {
    const re = options.to === "/" ? "\\\\" : "/";
    input = input.replaceAll(new RegExp(re, "g"), options.to);
  }
  const slash = options?.to ?? input.match(/[/\\]/)?.[0] ?? "/";
  if (options?.start === true && !input.startsWith(slash)) {
    input = slash + input;
  }
  if (options?.start === false && input.startsWith(slash)) {
    input = input.slice(1);
  }
  if (options?.end === true && !input.endsWith(slash)) {
    input += slash;
  }
  if (options?.end === false && input.endsWith(slash)) {
    input = input.slice(0, -1);
  }
  return input;
};

// src/strings/kebab-case/kebab-case.ts
var kebabCase = (input, _options) => {
  const options = { numbers: false, ..._options };
  let result = input.replaceAll(/([a-z])([A-Z])/g, "$1-$2").replaceAll(/[\s._]+/g, "-");
  if (!options.numbers)
    return result.toLowerCase();
  result = result.replace(/\d+/, "-$&").replaceAll(/(\d)([A-Z])/g, "$1-$2");
  return result.startsWith("-") ? result.slice(1).toLowerCase() : result.toLowerCase();
};

// src/strings/pad-end/pad-end.ts
var padEnd = (input, maxLength, fillString = " ") => input.toString().padEnd(maxLength, fillString);

// src/strings/pad-start/pad-start.ts
var padStart = (input, maxLength = 2, fillString = "0") => input.toString().padStart(maxLength, fillString);

// src/strings/pascal-case/pascal-case.ts
var defaultOptions2 = {
  preserveConsecutiveUppercase: false
};
var pascalCase = (input, options) => {
  const base = camelCase(input, { ...defaultOptions2, ...options });
  if (!base.length)
    return "";
  return base[0].toUpperCase() + base.slice(1);
};

// src/strings/quote/quote.ts
var quote = (str, char = '"') => {
  if (str === "")
    return `${char}${char}`;
  const [first, last] = [str[0], str.at(-1)];
  if (first !== char)
    str = char + str;
  if (last !== char)
    str += char;
  return str;
};

// src/arrays/array-of-length/array-of-length.ts
var arrayOfLength = (length, mapFunction) => {
  const neededLength = isInteger(length) && length > 0 ? length : 0;
  const arr = new Array(neededLength).fill(void 0);
  return mapFunction ? arr.map((_, index) => mapFunction(index)) : arr;
};

// src/strings/random-string/random-string.ts
var randomString = (length = 10, startWithLatin = true) => {
  const base = arrayOfLength(length, () => Math.trunc(Math.random() * 36).toString(36)).join("");
  if (!startWithLatin)
    return base;
  const latinCharacters = "abcdefghijklmnopqrstuvwxyz";
  const firstChar = latinCharacters.charAt(Math.floor(Math.random() * latinCharacters.length));
  return firstChar + base.slice(1);
};

// src/strings/romanize/romanize.ts
var numerals = {
  M: 1e3,
  CM: 900,
  D: 500,
  CD: 400,
  C: 100,
  XC: 90,
  L: 50,
  XL: 40,
  X: 10,
  IX: 9,
  V: 5,
  IV: 4,
  I: 1
};
var romanize = (num) => Object.entries(numerals).reduce((acc, [key, value]) => {
  acc += key.repeat(num / value >>> 0);
  num %= value;
  return acc;
}, "");

// src/strings/snake-case/snake-case.ts
var snakeCase = (input) => input.replaceAll(/([a-z])([A-Z])/g, "$1-$2").replaceAll(/[\s\-.]+/g, "_").toLowerCase();

// src/strings/strip-indent/strip-indent.ts
var _getMinimalIndent = (input) => {
  const match = input.match(/^[\t ]*(?=\S)/gm);
  if (!match)
    return 0;
  return match.reduce((minimalIndentation, spacings) => Math.min(minimalIndentation, spacings.length), Infinity);
};
var DEFAULTS = {
  trimLeadingSpacings: true,
  trimTrailingSpacings: true
};
var _applyOptions = (input, options) => {
  options.trimLeadingSpacings && (input = input.replace(/^\n\s*(?=\S)/, ""));
  options.trimTrailingSpacings && (input = input.replace(/\n\s*$/, ""));
  return input;
};
var stripIndent = (input, userOptions) => {
  const options = { ...DEFAULTS, ...userOptions };
  const minIndent = _getMinimalIndent(input);
  if (minIndent === 0)
    return _applyOptions(input, options);
  const regex = new RegExp(`^[	 ]{${minIndent}}`, "gm");
  return _applyOptions(input, options).replace(regex, "");
};

// src/strings/unquote/unquote.ts
var unquote = (str) => {
  if (!str)
    return "";
  const [first, last] = [str[0], str.at(-1)];
  if (first !== last)
    return str;
  if (first === '"' || first === "'" || first === "`")
    return str.slice(1, -1);
  return str;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  camelCase,
  capitalize,
  escapeRegExp,
  fileExtension,
  formatSlashes,
  kebabCase,
  padEnd,
  padStart,
  pascalCase,
  quote,
  randomString,
  romanize,
  snakeCase,
  stripIndent,
  unquote
});
