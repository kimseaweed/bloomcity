import {
  normalizeHex
} from "./chunk-KYACRDIB.js";

// src/colors/hex-to-rgb/hex-to-rgb.ts
var DEFAULT_OPTIONS = {
  alphaChannel: "always",
  cssAlphaNotation: "percentage",
  returnType: "object-short"
};
var hexToRgb = (hex, userOptions) => {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  hex = normalizeHex(hex, { alphaChannel: options.alphaChannel, notation: "long" }) ?? "";
  if (!hex)
    return null;
  const shouldAddAlphaChannel = hex.length === 9;
  const parts = hex.slice(1).match(/.{2}/g);
  const parsed = parts.map((part, index) => {
    return index === 3 ? +(parseInt(part, 16) / 255).toFixed(2) : parseInt(part, 16);
  });
  const [r, g, b, a] = parsed;
  if (options.returnType === "object-short") {
    const base = { r, g, b };
    if (options.alphaChannel === "never")
      return base;
    return shouldAddAlphaChannel ? { ...base, a } : base;
  }
  if (options.returnType === "object-long") {
    const base = { red: r, green: g, blue: b };
    if (options.alphaChannel === "never")
      return base;
    return shouldAddAlphaChannel ? { ...base, alpha: a } : base;
  }
  if (options.returnType === "array") {
    const base = [r, g, b];
    shouldAddAlphaChannel && base.push(a);
    return base;
  }
  const prefix = shouldAddAlphaChannel ? `rgba` : `rgb`;
  const alphaPrefix = shouldAddAlphaChannel ? options.returnType === "css-legacy" ? `, ` : ` / ` : "";
  const alphaPart = shouldAddAlphaChannel ? options.cssAlphaNotation === "percentage" ? `${alphaPrefix}${a * 100}%` : `${alphaPrefix}${a}` : ``;
  return options.returnType === "css-legacy" ? `${prefix}(${r}, ${g}, ${b}${alphaPart})` : `${prefix}(${r} ${g} ${b}${alphaPart})`;
};

export {
  hexToRgb
};
