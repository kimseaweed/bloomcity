"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/urls/index.ts
var urls_exports = {};
__export(urls_exports, {
  queryStringify: () => queryStringify
});
module.exports = __toCommonJS(urls_exports);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/guards/is-iterable/is-iterable.ts
var isIterable = (value) => (
  // eslint-disable-next-line unicorn/new-for-builtins
  Symbol.iterator in Object(value)
);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/guards/is-empty/is-empty.ts
var isEmpty = (value) => {
  if (value === void 0)
    return true;
  if (value === null)
    return true;
  if (value === false)
    return true;
  if (Number.isNaN(value))
    return true;
  if (value === 0)
    return true;
  if (value === BigInt(0))
    return true;
  if (value === "")
    return true;
  if (isIterable(value) && typeof value === "object" && "length" in value && value.length === 0)
    return true;
  if (isIterable(value) && typeof value === "object" && "size" in value && value.size === 0)
    return true;
  if (isObject(value))
    return !Object.keys(value).length;
  return false;
};

// src/guards/is-plain-object/is-plain-object.ts
var isPlainObject = (value) => {
  if (!isObject(value))
    return false;
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
};

// src/objects/ts-object/ts-object.ts
var tsObject = {
  /**
   * Typed version of `Object.keys()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.keys()` return value for a given object.
   */
  keys: (obj) => Object.keys(obj),
  /**
   * Typed version of `Object.values()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.values()` return value for a given object.
   */
  values: (obj) => Object.values(obj),
  /**
   * Typed version of `Object.entries()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.entries()` return value for a given object.
   */
  entries: (obj) => Object.entries(obj),
  /**
   * Typed version of `Object.fromEntries()`.
   *
   * @param   entries   Entries to process.
   *
   * @returns           `Object.fromEntries()` return value for a given object.
   */
  fromEntries: (entries) => Object.fromEntries(entries)
};

// src/urls/query-stringify/query-stringify.ts
var queryStringify = (object, prefix) => {
  if (isEmpty(object))
    return "";
  return tsObject.entries(object).reduce((acc, [key, value]) => {
    const encodedKey = encodeURIComponent(key);
    const pairKey = prefix ? `${prefix}[${encodedKey}]` : encodedKey;
    const pair = isPlainObject(value) || isArray(value) ? queryStringify(value, pairKey) : `${pairKey}=${encodeURIComponent(value)}`;
    acc.push(pair);
    return acc;
  }, []).filter(Boolean).join("&");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  queryStringify
});
