"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/numbers/number-format/number-format.ts
var number_format_exports = {};
__export(number_format_exports, {
  numberFormat: () => numberFormat
});
module.exports = __toCommonJS(number_format_exports);

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/guards/is-numeric/is-numeric.ts
var isNumeric = (value) => typeof value === "number" && !isNaN(value);

// src/guards/is-integer/is-integer.ts
var isInteger = (value) => Number.isInteger(value);

// src/arrays/array-of-length/array-of-length.ts
var arrayOfLength = (length, mapFunction) => {
  const neededLength = isInteger(length) && length > 0 ? length : 0;
  const arr = new Array(neededLength).fill(void 0);
  return mapFunction ? arr.map((_, index) => mapFunction(index)) : arr;
};

// src/numbers/to-number/to-number.ts
function toNumber(value, fallback) {
  const throwOrReturnFallback = () => {
    if (arguments.length === 1) {
      throw new Error(`The value "${value}" cannot be converted to a number`);
    }
    return fallback;
  };
  if (isNumeric(value))
    return value;
  if (isString(value)) {
    const number = Number(value);
    return isNumeric(number) ? number : throwOrReturnFallback();
  }
  return throwOrReturnFallback();
}

// src/numbers/number-format/number-format.ts
var numberFormat = (numberOrStringRepresentingNumber, decimals = 0, fractionSeparator = ".", thousandsSeparator = "\xA0") => {
  const number = toNumber(numberOrStringRepresentingNumber, 0);
  const toFixedFix = () => {
    const k = 10 ** decimals;
    return Math.round(number * k) / k;
  };
  const parts = String(decimals ? toFixedFix() : Math.round(number)).split(".");
  let [int, fraction = ""] = parts;
  if (int.length > 3) {
    int = int.replaceAll(/\B(?=(?:\d{3})+(?!\d))/g, thousandsSeparator);
  }
  if (fraction.length < decimals) {
    fraction += arrayOfLength(decimals - fraction.length + 1).join("0");
  }
  return [int, fraction].filter(Boolean).join(fractionSeparator);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  numberFormat
});
