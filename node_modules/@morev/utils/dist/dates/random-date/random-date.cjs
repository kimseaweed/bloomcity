"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dates/random-date/random-date.ts
var random_date_exports = {};
__export(random_date_exports, {
  randomDate: () => randomDate
});
module.exports = __toCommonJS(random_date_exports);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/guards/is-date/is-date.ts
var isDate = (value, checkValidity) => {
  const isDateObject = Object.prototype.toString.call(value).includes("Date");
  if (!isDateObject)
    return false;
  if (!checkValidity)
    return isDateObject;
  return !Number.isNaN(value.getTime());
};

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => value === void 0;

// src/numbers/clamp/clamp.ts
var clamp = (value, min = -Infinity, max = Infinity) => Math.max(
  min ?? -Infinity,
  Math.min(value, max ?? Infinity)
);

// src/dates/random-date/random-date.ts
var setTime = (date, hours, minutes, seconds, milliseconds) => {
  hours = clamp(hours, 0, 23);
  minutes = clamp(minutes, 0, 59);
  seconds = clamp(seconds, 0, 59);
  milliseconds = clamp(milliseconds, 0, 999);
  date.setHours(hours);
  date.setMinutes(minutes);
  date.setSeconds(seconds);
  date.setMilliseconds(milliseconds);
};
var randomDate = (start = /* @__PURE__ */ new Date(0), end = /* @__PURE__ */ new Date(), userOptions) => {
  if (!isDate(start, true))
    start = /* @__PURE__ */ new Date(0);
  if (!isDate(end, true))
    end = /* @__PURE__ */ new Date();
  const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  if (isUndefined(userOptions))
    return date;
  if (isString(userOptions.time)) {
    const [time, milliseconds = 0] = userOptions.time.split(".");
    const [hours = 0, minutes = 0, seconds = 0] = time.split(":").map((maybeNumber) => {
      const number = Number(maybeNumber);
      return Number.isNaN(number) ? 0 : number;
    });
    setTime(date, hours, minutes, seconds, +milliseconds);
  }
  if (isArray(userOptions.time)) {
    const [hours = 0, minutes = 0, seconds = 0, milliseconds = 0] = userOptions.time;
    setTime(date, hours, minutes, seconds, milliseconds);
  }
  return date;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  randomDate
});
