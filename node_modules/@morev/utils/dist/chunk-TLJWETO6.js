import {
  hexToRgb
} from "./chunk-OLU2ZWSL.js";
import {
  normalizeHex
} from "./chunk-KYACRDIB.js";
import {
  isNull
} from "./chunk-TK4YRMRC.js";
import {
  isHex
} from "./chunk-GEEDF44I.js";

// src/colors/contrast-color/contrast-color.ts
var DEFAULT_CANDIDATES = ["#000000", "#ffffff"];
var getLuminance = (hexColor) => {
  const rgba = hexToRgb(hexColor, { alphaChannel: "never", returnType: "array" });
  if (!rgba)
    return null;
  const k = rgba.map((value) => {
    value /= 255;
    return value < 0.03928 ? value / 12.92 : ((value + 0.055) / 1.055) ** 2.4;
  });
  return 0.2126 * k[0] + 0.7152 * k[1] + 0.0722 * k[2];
};
var getContrast = (colorOne, colorTwo) => {
  const [luminance1, luminance2] = [getLuminance(colorOne), getLuminance(colorTwo)];
  if (isNull(luminance1) || isNull(luminance2))
    return null;
  const ratio = (luminance1 + 0.05) / (luminance2 + 0.05);
  return luminance2 > luminance1 ? 1 / ratio : ratio;
};
var DEFAULT_OPTIONS = {
  preferableNotation: "long"
};
var contrastColor = (sourceColor, userCandidates, userOptions) => {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const candidates = userCandidates ?? DEFAULT_CANDIDATES;
  if (!isHex(sourceColor))
    return null;
  if (candidates.every((candidate) => !isHex(candidate)))
    return null;
  const contrasts = candidates.map((candidate) => getContrast(sourceColor, candidate)).filter(Boolean);
  const maxContrast = Math.max(...contrasts);
  const mostContrastColor = candidates[contrasts.indexOf(maxContrast)];
  if (options.preferableNotation === "preserve")
    return mostContrastColor;
  return normalizeHex(mostContrastColor, {
    alphaChannel: "never",
    notation: options.preferableNotation
  });
};

export {
  contrastColor
};
