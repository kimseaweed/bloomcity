import {
  LONG_HEX_REG_EXP,
  SHORT_HEX_REG_EXP
} from "./chunk-BODHRZ2V.js";
import {
  isNullish
} from "./chunk-Z5IVBZLV.js";
import {
  isHex
} from "./chunk-GEEDF44I.js";

// src/colors/normalize-hex/normalize-hex.ts
var DEFAULT_OPTIONS = {
  notation: "long",
  alphaChannel: "always"
};
var normalizeHex = (hex, userOptions) => {
  hex = hex.trim().toLowerCase();
  if (!isHex(hex))
    return null;
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const isShort = hex.length === 4 || hex.length === 5;
  const hasAlphaChannel = hex.length === 5 || hex.length === 9;
  const shouldAddAlphaChannel = options.alphaChannel === "always" || options.alphaChannel === "if-presented" && hasAlphaChannel;
  const parts = hex.replace(
    isShort ? SHORT_HEX_REG_EXP : LONG_HEX_REG_EXP,
    (_, r2, g2, b2, a2) => {
      if (isShort) {
        const alpha2 = !isNullish(a2) ? `${a2}${a2}` : `ff`;
        return `${r2}${r2}${g2}${g2}${b2}${b2}${alpha2}`;
      }
      return `${r2}${g2}${b2}${a2 || "ff"}`;
    }
  ).match(/.{2}/g);
  const [r, g, b, a] = parts;
  const rgb = options.notation === "short" ? (() => {
    const toCheck = [r, g, b, shouldAddAlphaChannel ? a : null].filter(Boolean);
    return toCheck.some((part) => !part.startsWith(part[1])) ? `#${r}${g}${b}` : `#${r[0]}${g[0]}${b[0]}`;
  })() : `#${r}${g}${b}`;
  if (!shouldAddAlphaChannel)
    return rgb;
  const alpha = rgb.length === 7 ? a : a[0];
  return `${rgb}${alpha}`;
};

export {
  normalizeHex
};
