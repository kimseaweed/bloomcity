"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/functions/throttle/throttle.ts
var throttle_exports = {};
__export(throttle_exports, {
  throttle: () => throttle
});
module.exports = __toCommonJS(throttle_exports);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/functions/throttle/throttle.ts
var parseOptions = (optionsOrDelay) => {
  if (isObject(optionsOrDelay)) {
    return [
      optionsOrDelay.delay ?? 0,
      optionsOrDelay.leading ?? true,
      optionsOrDelay.trailing ?? true
    ];
  }
  return [optionsOrDelay ?? 0, true, true];
};
var throttle = (callback, optionsOrDelay) => {
  const [delay, leading, trailing] = parseOptions(optionsOrDelay);
  let timeoutID = null;
  let cancelled;
  let lastExec = leading ? 0 : Date.now();
  const clearExistingTimeout = () => {
    if (!timeoutID)
      return;
    clearTimeout(timeoutID);
    timeoutID = null;
  };
  const cancel = () => {
    clearExistingTimeout();
    cancelled = true;
  };
  const trailingExec = (exec) => {
    if (!trailing)
      return;
    clearExistingTimeout();
    timeoutID ||= setTimeout(exec, delay);
  };
  function wrapper(...args) {
    if (cancelled)
      return;
    const self = this;
    const exec = () => {
      lastExec = Date.now();
      callback.apply(self, args);
    };
    trailingExec(exec);
    const runTime = Date.now() - lastExec;
    if (runTime > delay)
      exec();
  }
  wrapper.cancel = cancel;
  return wrapper;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  throttle
});
