"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/functions/with-probability/with-probability.ts
var with_probability_exports = {};
__export(with_probability_exports, {
  withProbability: () => withProbability
});
module.exports = __toCommonJS(with_probability_exports);

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/guards/is-function/is-function.ts
var isFunction = (value) => Object.prototype.toString.call(value) === "[object Function]";

// src/numbers/clamp/clamp.ts
var clamp = (value, min = -Infinity, max = Infinity) => Math.max(
  min ?? -Infinity,
  Math.min(value, max ?? Infinity)
);

// src/functions/with-probability/with-probability.utils.ts
var toNumericProbability = (value) => {
  let isPercentage = false;
  if (isString(value)) {
    isPercentage = value.trim().endsWith("%");
    value = +value.replaceAll(/[^\d\-.]/g, "");
  }
  if (Number.isNaN(value))
    return 0;
  if (value > 1)
    isPercentage = true;
  if (isPercentage) {
    value = clamp(value, 0, 100);
    return value / 100;
  }
  return clamp(value, 0, 1);
};
var toValue = (value) => isFunction(value) ? value() : value;

// src/functions/with-probability/with-probability.ts
var withProbability = (probability, primaryValue, secondaryValue) => {
  if (probability === 1)
    return toValue(primaryValue);
  if (probability === 0)
    return toValue(secondaryValue);
  return Math.random() > toNumericProbability(probability) ? toValue(secondaryValue) : toValue(primaryValue);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  withProbability
});
