import {
  normalizeHex
} from "./chunk-KYACRDIB.js";
import {
  toNumber
} from "./chunk-OCZQGT2X.js";
import {
  clamp
} from "./chunk-EJGCYSTB.js";
import {
  isNullish
} from "./chunk-Z5IVBZLV.js";
import {
  isNull
} from "./chunk-TK4YRMRC.js";
import {
  isHex
} from "./chunk-GEEDF44I.js";
import {
  isInteger
} from "./chunk-4W3EM56D.js";
import {
  isObject
} from "./chunk-XUWL4VKZ.js";
import {
  isNumeric
} from "./chunk-OBG63REY.js";
import {
  isArray
} from "./chunk-UDVSPJHY.js";
import {
  isString
} from "./chunk-RUB2ELNH.js";

// src/colors/rgb-to-hex/rgb-to-hex.ts
var CSS_REG_EXP = /^rgba?\(((?:\s*\d+\s*,?\s*){2}\d+)(\s*[,/]\s*-?[\d.]+%?)?\s*\);?$/m;
var DEFAULT_OPTIONS = {
  alphaChannel: "always",
  preferableNotation: "long"
};
var numberToHex = (part) => part.toString(16).padStart(2, "0");
var isValidRgbPart = (part) => isInteger(part) && part >= 0 && part <= 255;
var isValidAlphaPart = (part) => isNumeric(part) && part >= 0 && part <= 1;
var rgbToHex = (source, userOptions) => {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const toHex = (r, g, b, a) => {
    const hex = `#${numberToHex(r)}${numberToHex(g)}${numberToHex(b)}${isNull(a) ? "" : numberToHex(a)}`;
    return normalizeHex(hex, {
      alphaChannel: options.alphaChannel,
      notation: options.preferableNotation
    });
  };
  if (isString(source)) {
    source = source.toLowerCase().trim();
    if (isHex([...source].join(""))) {
      source = normalizeHex(source, {
        notation: options.preferableNotation,
        alphaChannel: options.alphaChannel
      }) ?? "";
      return source || null;
    }
    if (!source.startsWith("rgb"))
      return null;
    const parts = source.replaceAll(/\s+/g, " ").match(CSS_REG_EXP);
    if (!parts)
      return null;
    const [_, rgb, alphaPart] = parts;
    const rgbParts = rgb.split(/ |, /).map((part) => parseInt(part, 10)).filter((part) => !Number.isNaN(part));
    if (rgbParts.length !== 3)
      return null;
    if (rgbParts.some((part) => !isValidRgbPart(part)))
      return null;
    const [r, g, b] = rgbParts;
    const a = (() => {
      if (!alphaPart)
        return null;
      const cleanAlphaPart = alphaPart.replaceAll(/[^\d%\-.]/g, "");
      if (cleanAlphaPart.endsWith("%")) {
        const percent = toNumber(alphaPart.replaceAll(/[^\d\-.]/g, ""), null);
        if (percent === null)
          return null;
        return Math.round(255 * clamp(percent, 0, 100) / 100);
      }
      const amount = toNumber(cleanAlphaPart, null);
      if (amount === null)
        return null;
      return Math.round(255 * clamp(amount, 0, 1));
    })();
    return toHex(r, g, b, a);
  }
  if (isArray(source)) {
    const cleanInput = source.map((part) => toNumber(part, null)).filter((part) => part !== null);
    if (cleanInput.length !== 3 && cleanInput.length !== 4)
      return null;
    if (cleanInput.slice(0, 3).some((part) => !isValidRgbPart(part)))
      return null;
    const alpha = cleanInput[3] ?? null;
    if (alpha !== null && !isValidAlphaPart(alpha))
      return null;
    const a = alpha === null ? null : Math.round(255 * alpha);
    return toHex(cleanInput[0], cleanInput[1], cleanInput[2], a);
  }
  if (isObject(source)) {
    let rgb = null;
    if ("r" in source && "g" in source && "b" in source) {
      rgb = { r: source.r, g: source.g, b: source.b, a: source.a };
    }
    if ("red" in source && "green" in source && "blue" in source) {
      rgb = { r: source.red, g: source.green, b: source.blue, a: source.alpha };
    }
    if (!rgb)
      return null;
    if ([rgb.r, rgb.g, rgb.b].some((value) => !isValidRgbPart(value)))
      return null;
    if (!isNullish(rgb.a) && !isValidAlphaPart(rgb.a))
      return null;
    const alpha = isNullish(rgb.a) ? null : Math.round(rgb.a * 255);
    return toHex(rgb.r, rgb.g, rgb.b, alpha);
  }
  return null;
};

export {
  rgbToHex
};
