"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/promises/min-time-promise/min-time-promise.ts
var min_time_promise_exports = {};
__export(min_time_promise_exports, {
  minTimePromise: () => minTimePromise
});
module.exports = __toCommonJS(min_time_promise_exports);

// src/functions/sleep/sleep.ts
var sleep = async (duration = 0) => new Promise((resolve) => setTimeout(resolve, duration));

// src/numbers/clamp/clamp.ts
var clamp = (value, min = -Infinity, max = Infinity) => Math.max(
  min ?? -Infinity,
  Math.min(value, max ?? Infinity)
);

// src/promises/min-time-promise/min-time-promise.ts
var minTimePromise = async (promise, minTime = 0) => {
  const startTime = Date.now();
  let errorTime = null;
  const result = await Promise.all([promise, sleep(minTime)]).catch((e) => {
    errorTime = Date.now();
    return [e];
  });
  if (errorTime) {
    await sleep(clamp(minTime - (errorTime - startTime), 0));
    throw result[0];
  }
  return result[0];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  minTimePromise
});
