"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/arrays/index.ts
var arrays_exports = {};
__export(arrays_exports, {
  arrayInsert: () => arrayInsert,
  arrayInsertMutable: () => arrayInsertMutable,
  arrayOfLength: () => arrayOfLength,
  arrayRange: () => arrayRange,
  arrayRemove: () => arrayRemove,
  arrayRemoveMutable: () => arrayRemoveMutable,
  arraySample: () => arraySample,
  arrayShuffle: () => arrayShuffle,
  arraySwap: () => arraySwap,
  arraySwapMutable: () => arraySwapMutable,
  arrayUnique: () => arrayUnique,
  arraysDifference: () => arraysDifference,
  arraysIntersection: () => arraysIntersection,
  arraysUnion: () => arraysUnion,
  asyncArray: () => asyncArray,
  toArray: () => toArray
});
module.exports = __toCommonJS(arrays_exports);

// src/arrays/array-insert/array-insert.ts
var arrayInsertMutable = (arr, index, ...items) => {
  arr.splice(index, 0, ...items);
  return arr;
};
var arrayInsert = (arr, index, ...items) => arrayInsertMutable([...arr], index, ...items);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/guards/is-boolean/is-boolean.ts
var isBoolean = (value) => value === true || value === false;

// src/guards/is-iterable/is-iterable.ts
var isIterable = (value) => (
  // eslint-disable-next-line unicorn/new-for-builtins
  Symbol.iterator in Object(value)
);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/guards/is-empty/is-empty.ts
var isEmpty = (value) => {
  if (value === void 0)
    return true;
  if (value === null)
    return true;
  if (value === false)
    return true;
  if (Number.isNaN(value))
    return true;
  if (value === 0)
    return true;
  if (value === BigInt(0))
    return true;
  if (value === "")
    return true;
  if (isIterable(value) && typeof value === "object" && "length" in value && value.length === 0)
    return true;
  if (isIterable(value) && typeof value === "object" && "size" in value && value.size === 0)
    return true;
  if (isObject(value))
    return !Object.keys(value).length;
  return false;
};

// src/guards/is-numeric/is-numeric.ts
var isNumeric = (value) => typeof value === "number" && !isNaN(value);

// src/guards/is-function/is-function.ts
var isFunction = (value) => Object.prototype.toString.call(value) === "[object Function]";

// src/guards/is-integer/is-integer.ts
var isInteger = (value) => Number.isInteger(value);

// src/guards/is-null/is-null.ts
var isNull = (value) => value === null;

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => value === void 0;

// src/guards/is-nullish/is-nullish.ts
var isNullish = (value) => isNull(value) || isUndefined(value);

// src/arrays/array-of-length/array-of-length.ts
var arrayOfLength = (length, mapFunction) => {
  const neededLength = isInteger(length) && length > 0 ? length : 0;
  const arr = new Array(neededLength).fill(void 0);
  return mapFunction ? arr.map((_, index) => mapFunction(index)) : arr;
};

// src/arrays/array-range/array-range.ts
var arrayRange = (from, to) => {
  if (to === void 0) {
    if (from < 0) {
      to = 0;
    } else {
      to = from;
      from = 0;
    }
  }
  return arrayOfLength(Math.abs(to - from) + 1, (index) => index).map((i) => (from > to ? -i : i) + from);
};

// src/arrays/array-remove/array-remove.ts
var arrayRemoveMutable = (arr, value, onlyFirst = false) => {
  while (true) {
    const occurrence = arr.indexOf(value);
    if (occurrence === -1)
      return arr;
    arr.splice(occurrence, 1);
    if (onlyFirst)
      return arr;
  }
};
var arrayRemove = (arr, value, onlyFirst = false) => arrayRemoveMutable([...arr], value, onlyFirst);

// src/numbers/random-integer/random-integer.ts
var randomInteger = (min = 1, max = Number.MAX_SAFE_INTEGER) => Math.floor(Math.random() * (max - min + 1)) + min;

// src/arrays/array-shuffle/array-shuffle.ts
var arrayShuffle = (array) => {
  const copy = [...array];
  for (let i = copy.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [copy[i], copy[j]] = [copy[j], copy[i]];
  }
  return copy;
};

// src/arrays/array-sample/array-sample.ts
var arraySample = (array, size = 1, oversize = false) => {
  if (!array?.length || !isInteger(size) || size < 1)
    return void 0;
  if (size === 1) {
    return array[randomInteger(0, array.length - 1)];
  }
  !oversize && (size = Math.min(array.length, size));
  const result = [];
  while (result.length < size) {
    const neededCount = size - result.length;
    const iterationIndexes = arrayOfLength(array.length, (index) => index);
    if (neededCount > array.length) {
      result.push(...iterationIndexes.map((i) => array[i]));
    } else {
      result.push(...arrayShuffle(iterationIndexes).slice(0, neededCount).map((i) => array[i]));
    }
  }
  return result;
};

// src/numbers/clamp/clamp.ts
var clamp = (value, min = -Infinity, max = Infinity) => Math.max(
  min ?? -Infinity,
  Math.min(value, max ?? Infinity)
);

// src/functions/assert/assert.utils.ts
var typeMap = {
  "condition": "Assert condition failed",
  "no-value": "Assert value not undefined/null failed"
};
var messageFormatter = (failureType, message, properties) => {
  return [
    typeMap[failureType],
    message ? `: ${message}` : null,
    !isEmpty(properties) ? `: ${JSON.stringify(properties)}` : null
  ].filter(Boolean).join("");
};
var errorCreatorFactory = (formatter) => (failureType, message, properties) => new Error(formatter(failureType, message, properties));
var createConfiguration = () => ({
  formatter: messageFormatter,
  errorCreator: errorCreatorFactory(messageFormatter)
});

// src/functions/assert/assert.ts
var configuration = createConfiguration();
var _createAssert = (soft) => (conditionOrValue, message, properties) => {
  const createError = (type, props2) => configuration.errorCreator(type, message, props2);
  const report = (type, props2, error) => {
    error && configuration.errorReporter?.(type, error, message, props2);
    !error && configuration.warningReporter?.(type, message, props2);
  };
  const props = isFunction(properties) ? properties() : properties ?? {};
  if (isBoolean(conditionOrValue) && !conditionOrValue) {
    if (!soft) {
      const error = createError("condition", props);
      report("condition", props, error);
      throw error;
    }
    report("condition", props);
    return false;
  }
  if (isNullish(conditionOrValue)) {
    if (!soft) {
      const error = createError("no-value", props);
      report("no-value", props, error);
      throw error;
    }
    report("no-value", props);
    return false;
  }
  return conditionOrValue;
};
var hardAssert = _createAssert(false);
var softAssert = _createAssert(true);
var _assert = hardAssert;
_assert.soft = softAssert;
var assert = _assert;

// src/ranges/ranges.utils.ts
var formatInfinity = (value, isNeeded) => {
  if (!isNeeded)
    return isNullish(value) ? null : value;
  return value === Infinity || value === -Infinity ? null : isNullish(value) ? null : value;
};

// src/ranges/ranges-sort/ranges-sort.ts
var comparator = (a, b) => {
  if (isNullish(a) && isNullish(b))
    return 0;
  if (isNullish(a) && !isNullish(b))
    return -1;
  if (!isNullish(a) && isNullish(b))
    return 1;
  assert(isNumeric(a) && isNumeric(b));
  if (a < b)
    return -1;
  if (a > b)
    return 1;
  return 0;
};
var rangesSort = (ranges, infinityToNull = false) => {
  return [...ranges ?? []].filter((r) => !isNullish(r)).sort((r1, r2) => {
    assert(!isNullish(r1) && !isNullish(r2));
    if (r1[0] === r2[0]) {
      return comparator(r1[1], r2[1]);
    }
    return comparator(r1[0], r2[0]);
  }).map((range) => [
    formatInfinity(range[0], infinityToNull),
    formatInfinity(range[1], infinityToNull)
  ]);
};

// src/ranges/ranges-merge/ranges-merge.ts
var rangesMerge = (ranges, joinEdges = true, infinityToNull = false) => {
  const sorted = rangesSort(ranges, infinityToNull).map((r) => [
    isNullish(r[0]) ? -Infinity : r[0],
    isNullish(r[1]) ? Infinity : r[1]
  ]);
  for (let l = sorted.length - 1, i = l; i > 0; i--) {
    if (sorted[i][0] <= sorted[i - 1][0] || !joinEdges && sorted[i][0] < sorted[i - 1][1] || joinEdges && sorted[i][0] <= sorted[i - 1][1]) {
      sorted[i - 1][0] = Math.min(sorted[i][0], sorted[i - 1][0]);
      sorted[i - 1][1] = Math.max(sorted[i][1], sorted[i - 1][1]);
      sorted.splice(i, 1);
      i = sorted.length;
    }
  }
  return sorted.length ? sorted.map((r) => [
    formatInfinity(r[0], infinityToNull),
    formatInfinity(r[1], infinityToNull)
  ]) : [];
};

// src/ranges/ranges-intersection/ranges-intersection.ts
var DEFAULT_OPTIONS = {
  inclusive: false
};
var safeNumber = (maybeNumber, sign = "+") => maybeNumber ?? (sign === "+" ? Infinity : -Infinity);
var rangesIntersection = (ranges, userOptions) => {
  if (!ranges)
    return [];
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const isOverlapping = (minRange, maxRange) => {
    return options.inclusive ? safeNumber(minRange[1]) >= safeNumber(maxRange[0], "-") : safeNumber(minRange[1]) > safeNumber(maxRange[0], "-");
  };
  const matches = ranges.filter(Boolean).reduce(
    (acc, r1, index) => {
      if (index === ranges.length - 1)
        return acc;
      const restRanges = ranges.slice(index + 1).filter(Boolean);
      restRanges.forEach((r2) => {
        const min = safeNumber(r1[0], "-") < safeNumber(r2[0], "-") ? r1 : r2;
        const max = min === r1 ? r2 : r1;
        if (!isOverlapping(min, max))
          return null;
        acc.push([
          safeNumber(max[0], "-"),
          safeNumber(min[1]) < safeNumber(max[1]) ? safeNumber(min[1]) : safeNumber(max[1])
        ]);
      });
      return acc;
    },
    []
  );
  return rangesMerge(matches, options.inclusive);
};

// src/arrays/to-array/to-array.ts
var toArray = (value) => [value].flat();

// src/arrays/array-swap/array-swap.ts
var arraySwapMutable = (arr, firstPosition, secondPosition) => {
  const isInRange = (index) => index >= 0 && index <= arr.length - 1;
  const [first, second] = [firstPosition, secondPosition].map((position) => toArray(position)).sort((a, b) => a[0] > b[0] ? 1 : -1);
  if (first.some((position) => !isInRange(position))) {
    throw new Error("First swap position outside the array range");
  }
  if (!isUndefined(first[1]) && first[1] < first[0]) {
    throw new Error("The end edge of the first position is lower than the start edge");
  }
  if (second.some((position) => !isInRange(position))) {
    throw new Error("Second swap position outside the array range");
  }
  if (!isUndefined(second[1]) && second[1] < second[0]) {
    throw new Error("The end edge of the second position is lower than the start edge");
  }
  if (first.length === 1 && second.length === 1) {
    [arr[first[0]], arr[second[0]]] = [arr[second[0]], arr[first[0]]];
    return arr;
  }
  const [firstRange, secondRange] = [first, second].map((values) => values.length === 1 ? [values[0], values[0]] : values);
  if (rangesIntersection([firstRange, secondRange], { inclusive: true }).length) {
    throw new Error("The edges cannot be crossed");
  }
  const firstSlice = arr.splice(first[0], first[1] ? first[1] - first[0] + 1 : 1);
  const secondSlice = arr.splice(
    clamp(second[0] - firstSlice.length, 0),
    second[1] ? second[1] - second[0] + 1 : 1
  );
  arr.splice(first[0], 0, ...secondSlice);
  arr.splice(second[0] + secondSlice.length - firstSlice.length, 0, ...firstSlice);
  return arr;
};
var arraySwap = (arr, firstPosition, secondPosition) => {
  return arraySwapMutable([...arr], firstPosition, secondPosition);
};

// src/arrays/array-unique/array-unique.ts
var arrayUnique = (array) => [...new Set(array)];

// src/arrays/arrays-intersection/arrays-intersection.ts
var arraysIntersection = (...arrays) => arrays.reduce((acc, array) => acc.filter((i) => array.includes(i)));

// src/arrays/arrays-union/arrays-union.ts
var arraysUnion = (...arrays) => [...new Set(arrays.flat())];

// src/arrays/arrays-difference/arrays-difference.ts
var arraysDifference = (...arrays) => {
  const intersections = arraysIntersection(...arrays);
  return arraysUnion(...arrays.map((array) => array.filter((i) => !intersections.includes(i))));
};

// src/arrays/async-array/async-array.utils.ts
var resolve = async (collectionOrPromise) => {
  if (isArray(collectionOrPromise))
    return Promise.all(collectionOrPromise);
  return Promise.all([collectionOrPromise]);
};
var series = (reducer, initial, order = "left-to-right") => {
  const method = order === "left-to-right" ? "reduce" : "reduceRight";
  return (iterable) => {
    return iterable[method]((accumulator, value, index) => {
      return accumulator.then((results) => reducer(results, value, index, iterable));
    }, Promise.resolve(initial));
  };
};

// src/arrays/async-array/async-array.ts
function forEach(callback) {
  return resolve(this).then(
    series((results, value, index, arr) => callback(value, index, arr), void 0)
  );
}
function reduce(reducer, initial) {
  return resolve(this).then(
    series(reducer, initial, "left-to-right")
  );
}
function reduceRight(reducer, initial) {
  return resolve(this).then(
    series(reducer, initial, "right-to-left")
  );
}
function map(mapper) {
  return resolve(this).then(
    (values) => Promise.all(
      values.map((value, index, arr) => mapper(value, index, arr))
    )
  );
}
var asyncArray = (arr) => {
  return {
    forEach: forEach.bind(arr),
    reduce: reduce.bind(arr),
    reduceRight: reduceRight.bind(arr),
    map: map.bind(arr)
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  arrayInsert,
  arrayInsertMutable,
  arrayOfLength,
  arrayRange,
  arrayRemove,
  arrayRemoveMutable,
  arraySample,
  arrayShuffle,
  arraySwap,
  arraySwapMutable,
  arrayUnique,
  arraysDifference,
  arraysIntersection,
  arraysUnion,
  asyncArray,
  toArray
});
