"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/arrays/async-array/async-array.utils.ts
var async_array_utils_exports = {};
__export(async_array_utils_exports, {
  resolve: () => resolve,
  series: () => series
});
module.exports = __toCommonJS(async_array_utils_exports);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/arrays/async-array/async-array.utils.ts
var resolve = async (collectionOrPromise) => {
  if (isArray(collectionOrPromise))
    return Promise.all(collectionOrPromise);
  return Promise.all([collectionOrPromise]);
};
var series = (reducer, initial, order = "left-to-right") => {
  const method = order === "left-to-right" ? "reduce" : "reduceRight";
  return (iterable) => {
    return iterable[method]((accumulator, value, index) => {
      return accumulator.then((results) => reducer(results, value, index, iterable));
    }, Promise.resolve(initial));
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  resolve,
  series
});
