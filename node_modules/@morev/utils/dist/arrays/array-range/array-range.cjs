"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/arrays/array-range/array-range.ts
var array_range_exports = {};
__export(array_range_exports, {
  arrayRange: () => arrayRange
});
module.exports = __toCommonJS(array_range_exports);

// src/guards/is-integer/is-integer.ts
var isInteger = (value) => Number.isInteger(value);

// src/arrays/array-of-length/array-of-length.ts
var arrayOfLength = (length, mapFunction) => {
  const neededLength = isInteger(length) && length > 0 ? length : 0;
  const arr = new Array(neededLength).fill(void 0);
  return mapFunction ? arr.map((_, index) => mapFunction(index)) : arr;
};

// src/arrays/array-range/array-range.ts
var arrayRange = (from, to) => {
  if (to === void 0) {
    if (from < 0) {
      to = 0;
    } else {
      to = from;
      from = 0;
    }
  }
  return arrayOfLength(Math.abs(to - from) + 1, (index) => index).map((i) => (from > to ? -i : i) + from);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  arrayRange
});
