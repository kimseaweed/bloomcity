"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ranges/ranges-intersection/ranges-intersection.ts
var ranges_intersection_exports = {};
__export(ranges_intersection_exports, {
  rangesIntersection: () => rangesIntersection
});
module.exports = __toCommonJS(ranges_intersection_exports);

// src/guards/is-boolean/is-boolean.ts
var isBoolean = (value) => value === true || value === false;

// src/guards/is-iterable/is-iterable.ts
var isIterable = (value) => (
  // eslint-disable-next-line unicorn/new-for-builtins
  Symbol.iterator in Object(value)
);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/guards/is-empty/is-empty.ts
var isEmpty = (value) => {
  if (value === void 0)
    return true;
  if (value === null)
    return true;
  if (value === false)
    return true;
  if (Number.isNaN(value))
    return true;
  if (value === 0)
    return true;
  if (value === BigInt(0))
    return true;
  if (value === "")
    return true;
  if (isIterable(value) && typeof value === "object" && "length" in value && value.length === 0)
    return true;
  if (isIterable(value) && typeof value === "object" && "size" in value && value.size === 0)
    return true;
  if (isObject(value))
    return !Object.keys(value).length;
  return false;
};

// src/guards/is-numeric/is-numeric.ts
var isNumeric = (value) => typeof value === "number" && !isNaN(value);

// src/guards/is-function/is-function.ts
var isFunction = (value) => Object.prototype.toString.call(value) === "[object Function]";

// src/guards/is-null/is-null.ts
var isNull = (value) => value === null;

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => value === void 0;

// src/guards/is-nullish/is-nullish.ts
var isNullish = (value) => isNull(value) || isUndefined(value);

// src/functions/assert/assert.utils.ts
var typeMap = {
  "condition": "Assert condition failed",
  "no-value": "Assert value not undefined/null failed"
};
var messageFormatter = (failureType, message, properties) => {
  return [
    typeMap[failureType],
    message ? `: ${message}` : null,
    !isEmpty(properties) ? `: ${JSON.stringify(properties)}` : null
  ].filter(Boolean).join("");
};
var errorCreatorFactory = (formatter) => (failureType, message, properties) => new Error(formatter(failureType, message, properties));
var createConfiguration = () => ({
  formatter: messageFormatter,
  errorCreator: errorCreatorFactory(messageFormatter)
});

// src/functions/assert/assert.ts
var configuration = createConfiguration();
var _createAssert = (soft) => (conditionOrValue, message, properties) => {
  const createError = (type, props2) => configuration.errorCreator(type, message, props2);
  const report = (type, props2, error) => {
    error && configuration.errorReporter?.(type, error, message, props2);
    !error && configuration.warningReporter?.(type, message, props2);
  };
  const props = isFunction(properties) ? properties() : properties ?? {};
  if (isBoolean(conditionOrValue) && !conditionOrValue) {
    if (!soft) {
      const error = createError("condition", props);
      report("condition", props, error);
      throw error;
    }
    report("condition", props);
    return false;
  }
  if (isNullish(conditionOrValue)) {
    if (!soft) {
      const error = createError("no-value", props);
      report("no-value", props, error);
      throw error;
    }
    report("no-value", props);
    return false;
  }
  return conditionOrValue;
};
var hardAssert = _createAssert(false);
var softAssert = _createAssert(true);
var _assert = hardAssert;
_assert.soft = softAssert;
var assert = _assert;

// src/ranges/ranges.utils.ts
var formatInfinity = (value, isNeeded) => {
  if (!isNeeded)
    return isNullish(value) ? null : value;
  return value === Infinity || value === -Infinity ? null : isNullish(value) ? null : value;
};

// src/ranges/ranges-sort/ranges-sort.ts
var comparator = (a, b) => {
  if (isNullish(a) && isNullish(b))
    return 0;
  if (isNullish(a) && !isNullish(b))
    return -1;
  if (!isNullish(a) && isNullish(b))
    return 1;
  assert(isNumeric(a) && isNumeric(b));
  if (a < b)
    return -1;
  if (a > b)
    return 1;
  return 0;
};
var rangesSort = (ranges, infinityToNull = false) => {
  return [...ranges ?? []].filter((r) => !isNullish(r)).sort((r1, r2) => {
    assert(!isNullish(r1) && !isNullish(r2));
    if (r1[0] === r2[0]) {
      return comparator(r1[1], r2[1]);
    }
    return comparator(r1[0], r2[0]);
  }).map((range) => [
    formatInfinity(range[0], infinityToNull),
    formatInfinity(range[1], infinityToNull)
  ]);
};

// src/ranges/ranges-merge/ranges-merge.ts
var rangesMerge = (ranges, joinEdges = true, infinityToNull = false) => {
  const sorted = rangesSort(ranges, infinityToNull).map((r) => [
    isNullish(r[0]) ? -Infinity : r[0],
    isNullish(r[1]) ? Infinity : r[1]
  ]);
  for (let l = sorted.length - 1, i = l; i > 0; i--) {
    if (sorted[i][0] <= sorted[i - 1][0] || !joinEdges && sorted[i][0] < sorted[i - 1][1] || joinEdges && sorted[i][0] <= sorted[i - 1][1]) {
      sorted[i - 1][0] = Math.min(sorted[i][0], sorted[i - 1][0]);
      sorted[i - 1][1] = Math.max(sorted[i][1], sorted[i - 1][1]);
      sorted.splice(i, 1);
      i = sorted.length;
    }
  }
  return sorted.length ? sorted.map((r) => [
    formatInfinity(r[0], infinityToNull),
    formatInfinity(r[1], infinityToNull)
  ]) : [];
};

// src/ranges/ranges-intersection/ranges-intersection.ts
var DEFAULT_OPTIONS = {
  inclusive: false
};
var safeNumber = (maybeNumber, sign = "+") => maybeNumber ?? (sign === "+" ? Infinity : -Infinity);
var rangesIntersection = (ranges, userOptions) => {
  if (!ranges)
    return [];
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const isOverlapping = (minRange, maxRange) => {
    return options.inclusive ? safeNumber(minRange[1]) >= safeNumber(maxRange[0], "-") : safeNumber(minRange[1]) > safeNumber(maxRange[0], "-");
  };
  const matches = ranges.filter(Boolean).reduce(
    (acc, r1, index) => {
      if (index === ranges.length - 1)
        return acc;
      const restRanges = ranges.slice(index + 1).filter(Boolean);
      restRanges.forEach((r2) => {
        const min = safeNumber(r1[0], "-") < safeNumber(r2[0], "-") ? r1 : r2;
        const max = min === r1 ? r2 : r1;
        if (!isOverlapping(min, max))
          return null;
        acc.push([
          safeNumber(max[0], "-"),
          safeNumber(min[1]) < safeNumber(max[1]) ? safeNumber(min[1]) : safeNumber(max[1])
        ]);
      });
      return acc;
    },
    []
  );
  return rangesMerge(matches, options.inclusive);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rangesIntersection
});
