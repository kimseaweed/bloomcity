"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ranges/range-includes/range-includes.ts
var range_includes_exports = {};
__export(range_includes_exports, {
  rangeIncludes: () => rangeIncludes
});
module.exports = __toCommonJS(range_includes_exports);

// src/guards/is-null/is-null.ts
var isNull = (value) => value === null;

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => value === void 0;

// src/guards/is-nullish/is-nullish.ts
var isNullish = (value) => isNull(value) || isUndefined(value);

// src/ranges/range-includes/range-includes.ts
var rangeIncludes = (value, ranges, mode = "any") => {
  if (Number.isNaN(value))
    return false;
  const method = mode === "all" ? "every" : "some";
  return (ranges ?? [])[method](([min, max]) => {
    if (Number.isNaN(min) || Number.isNaN(max))
      return false;
    if (!isNullish(min) && value < min)
      return false;
    if (!isNullish(max) && value > max)
      return false;
    return true;
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rangeIncludes
});
