"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dom/get-element-offset/get-element-offset.ts
var get_element_offset_exports = {};
__export(get_element_offset_exports, {
  getElementOffset: () => getElementOffset
});
module.exports = __toCommonJS(get_element_offset_exports);

// src/dom/get-window-scroll/get-window-scroll.ts
var getScrollTop = () => Math.max(window.pageYOffset || 0, window.scrollY || 0, document.documentElement.scrollTop, document.body.scrollTop);
var getScrollLeft = () => Math.max(window.pageXOffset || 0, window.scrollX || 0, document.documentElement.scrollLeft, document.body.scrollLeft);
var getWindowScroll = (axis = "y") => {
  if (axis === "y")
    return getScrollTop();
  if (axis === "x")
    return getScrollLeft();
  return { x: getScrollLeft(), y: getScrollTop() };
};

// src/dom/get-element-offset/get-element-offset.ts
var getElementScroll = (el, axis = "both") => {
  if (axis === "both") {
    return { x: el.scrollLeft, y: el.scrollTop };
  }
  return axis === "x" ? el.scrollLeft : el.scrollTop;
};
var getElementOffset = (el, axis = "both", parent = window) => {
  const parentRect = parent === window || parent === null ? { top: 0, left: 0 } : parent.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  const top = elRect.top - parentRect.top;
  const left = elRect.left - parentRect.left;
  const scroll = parent === window || !parent ? getWindowScroll(axis) : getElementScroll(parent, axis);
  if (axis === "y")
    return top + scroll;
  if (axis === "x")
    return left + scroll;
  return {
    // @ts-expect-error -- TODO
    x: left + scroll.x,
    // @ts-expect-error -- TODO
    y: top + scroll.y
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getElementOffset
});
