"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dom/index.ts
var dom_exports = {};
__export(dom_exports, {
  getDocumentSize: () => getDocumentSize,
  getElement: () => getElement,
  getElementOffset: () => getElementOffset,
  getScrollLimit: () => getScrollLimit,
  getScrollableAncestor: () => getScrollableAncestor,
  getScrollbarWidth: () => getScrollbarWidth,
  getWindowScroll: () => getWindowScroll
});
module.exports = __toCommonJS(dom_exports);

// src/dom/get-document-size/get-document-size.ts
var getDocumentSize = (axis = "y") => {
  const scrollWidth = Math.max(
    document.body.scrollWidth,
    document.documentElement.scrollWidth,
    document.body.offsetWidth,
    document.documentElement.offsetWidth,
    document.body.clientWidth,
    document.documentElement.clientWidth
  );
  const scrollHeight = Math.max(
    document.body.scrollHeight,
    document.documentElement.scrollHeight,
    document.body.offsetHeight,
    document.documentElement.offsetHeight,
    document.body.clientHeight,
    document.documentElement.clientHeight
  );
  return axis === "both" ? { x: scrollWidth, y: scrollHeight } : axis === "x" ? scrollWidth : scrollHeight;
};

// src/guards/is-element/is-element.ts
var isElement = (value) => value instanceof Element;

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/dom/get-element/get-element.ts
var getElement = (value, parent = null) => {
  if (isString(parent)) {
    parent = document.querySelector(parent);
  }
  if (isString(value)) {
    return isElement(parent) ? parent.querySelector(value) : document.querySelector(value);
  }
  if (isElement(value)) {
    return isElement(parent) ? parent.contains(value) ? value : null : value;
  }
  return null;
};

// src/dom/get-window-scroll/get-window-scroll.ts
var getScrollTop = () => Math.max(window.pageYOffset || 0, window.scrollY || 0, document.documentElement.scrollTop, document.body.scrollTop);
var getScrollLeft = () => Math.max(window.pageXOffset || 0, window.scrollX || 0, document.documentElement.scrollLeft, document.body.scrollLeft);
var getWindowScroll = (axis = "y") => {
  if (axis === "y")
    return getScrollTop();
  if (axis === "x")
    return getScrollLeft();
  return { x: getScrollLeft(), y: getScrollTop() };
};

// src/dom/get-element-offset/get-element-offset.ts
var getElementScroll = (el, axis = "both") => {
  if (axis === "both") {
    return { x: el.scrollLeft, y: el.scrollTop };
  }
  return axis === "x" ? el.scrollLeft : el.scrollTop;
};
var getElementOffset = (el, axis = "both", parent = window) => {
  const parentRect = parent === window || parent === null ? { top: 0, left: 0 } : parent.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  const top = elRect.top - parentRect.top;
  const left = elRect.left - parentRect.left;
  const scroll = parent === window || !parent ? getWindowScroll(axis) : getElementScroll(parent, axis);
  if (axis === "y")
    return top + scroll;
  if (axis === "x")
    return left + scroll;
  return {
    // @ts-expect-error -- TODO
    x: left + scroll.x,
    // @ts-expect-error -- TODO
    y: top + scroll.y
  };
};

// src/dom/get-scroll-limit/get-scroll-limit.ts
var toMax = (v) => Math.max(0, v);
var getScrollLimit = (axis = "y") => {
  if (axis === "both") {
    const ds2 = getDocumentSize(axis);
    return {
      x: toMax(ds2.x - window.innerWidth),
      y: toMax(ds2.y - window.innerHeight)
    };
  }
  const ds = getDocumentSize(axis);
  return axis === "x" ? toMax(ds - window.innerWidth) : toMax(ds - window.innerHeight);
};

// src/dom/get-scrollable-ancestor/get-scrollable-ancestor.ts
var getScrollableAncestor = (element, axis = "both") => {
  let el = element;
  while (el?.parentElement) {
    el = el.parentElement;
    if (el === document.body)
      return window;
    if (el === document.documentElement)
      return window;
    const styles = window.getComputedStyle(el);
    const toCheck = [];
    ["both", "x"].includes(axis) && toCheck.push(styles.getPropertyValue("overflow-x"));
    ["both", "y"].includes(axis) && toCheck.push(styles.getPropertyValue("overflow-y"));
    const isScrollable = toCheck.some((val) => ["auto", "scroll"].includes(val));
    if (isScrollable)
      return el;
  }
  return window;
};

// src/dom/get-scrollbar-width/get-scrollbar-width.ts
var getScrollbarWidth = (el = document.body) => {
  return el === document.body ? window.innerWidth - document.documentElement.clientWidth : el.offsetWidth - el.clientWidth;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDocumentSize,
  getElement,
  getElementOffset,
  getScrollLimit,
  getScrollableAncestor,
  getScrollbarWidth,
  getWindowScroll
});
