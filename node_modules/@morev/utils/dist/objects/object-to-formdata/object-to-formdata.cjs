"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/objects/object-to-formdata/object-to-formdata.ts
var object_to_formdata_exports = {};
__export(object_to_formdata_exports, {
  objectToFormdata: () => objectToFormdata
});
module.exports = __toCommonJS(object_to_formdata_exports);

// src/guards/is-array/is-array.ts
var isArray = (value) => Array.isArray(value);

// src/guards/is-blob/is-blob.ts
var isBlob = (value) => {
  if (typeof Blob === "undefined")
    return false;
  return value instanceof Blob || Object.prototype.toString.call(value).includes("Blob");
};

// src/guards/is-boolean/is-boolean.ts
var isBoolean = (value) => value === true || value === false;

// src/guards/is-date/is-date.ts
var isDate = (value, checkValidity) => {
  const isDateObject = Object.prototype.toString.call(value).includes("Date");
  if (!isDateObject)
    return false;
  if (!checkValidity)
    return isDateObject;
  return !Number.isNaN(value.getTime());
};

// src/guards/is-string/is-string.ts
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/guards/is-file/is-file.ts
var isFile = (value) => {
  if (typeof File === "undefined")
    return false;
  return value instanceof File || Object.prototype.toString.call(value).includes("File");
};

// src/guards/is-numeric/is-numeric.ts
var isNumeric = (value) => typeof value === "number" && !isNaN(value);

// src/guards/is-function/is-function.ts
var isFunction = (value) => Object.prototype.toString.call(value) === "[object Function]";

// src/guards/is-null/is-null.ts
var isNull = (value) => value === null;

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => value === void 0;

// src/objects/ts-object/ts-object.ts
var tsObject = {
  /**
   * Typed version of `Object.keys()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.keys()` return value for a given object.
   */
  keys: (obj) => Object.keys(obj),
  /**
   * Typed version of `Object.values()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.values()` return value for a given object.
   */
  values: (obj) => Object.values(obj),
  /**
   * Typed version of `Object.entries()`.
   *
   * @param   obj   Object to process.
   *
   * @returns       `Object.entries()` return value for a given object.
   */
  entries: (obj) => Object.entries(obj),
  /**
   * Typed version of `Object.fromEntries()`.
   *
   * @param   entries   Entries to process.
   *
   * @returns           `Object.fromEntries()` return value for a given object.
   */
  fromEntries: (entries) => Object.fromEntries(entries)
};

// src/objects/object-to-formdata/object-to-formdata.ts
var DEFAULT_OPTIONS = {
  indices: false,
  nullValues: "omit",
  booleanValues: "preserve-as-strings",
  emptyArrays: "omit",
  arrayBrackets: "append",
  objectKeysNotation: "brackets"
};
var serialize = (key, value, options, formData) => {
  if (isUndefined(value))
    return;
  if (isNull(value)) {
    if (options.nullValues === "omit")
      return;
    const realValue = options.nullValues === "preserve-as-empty-string" ? "" : "null";
    formData.append(key, realValue);
    return;
  }
  if (isDate(value)) {
    formData.append(key, value.toISOString());
    return;
  }
  if (isBoolean(value)) {
    const realValue = options.booleanValues === "preserve-as-integers" ? value ? "1" : "0" : value.toString();
    formData.append(key, realValue);
    return;
  }
  if (isArray(value)) {
    if (!value.length) {
      if (options.emptyArrays === "preserve") {
        formData.append(key, "");
      }
      return;
    }
    const isFilesArray = value.every((innerValue) => isFile(innerValue));
    value.forEach((arrayValue, index) => {
      const arrayKey = (() => {
        if (options.arrayBrackets === "append" || options.arrayBrackets === "append-only-for-files" && isFilesArray)
          return `${key}[${options.indices ? index : ""}]`;
        return key.replaceAll(/\[]$/gm, "");
      })();
      serialize(arrayKey, arrayValue, options, formData);
    });
    return;
  }
  if (isBlob(value)) {
    formData.append(key, value);
    return;
  }
  if (isObject(value)) {
    tsObject.entries(value).forEach(([innerKey, innerValue]) => {
      const realInnerKey = (() => {
        if (!key)
          return innerKey;
        return options.objectKeysNotation === "brackets" ? `${key}[${innerKey}]` : `${key}.${innerKey}`;
      })();
      serialize(realInnerKey, innerValue, options, formData);
    });
    return;
  }
  if (isNumeric(value)) {
    formData.append(key, value.toString());
    return;
  }
  if (isString(value) || isFunction(value?.toString)) {
    formData.append(key, value.toString());
  }
};
var objectToFormdata = (object, userOptions, existingFormData) => {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const formData = existingFormData ?? new FormData();
  serialize("", object, options, formData);
  return formData;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  objectToFormdata
});
