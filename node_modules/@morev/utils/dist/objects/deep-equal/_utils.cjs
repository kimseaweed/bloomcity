"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/objects/deep-equal/_utils.ts
var utils_exports = {};
__export(utils_exports, {
  areArraysEqual: () => areArraysEqual,
  areObjectsEqual: () => areObjectsEqual,
  areRegExpsEqual: () => areRegExpsEqual
});
module.exports = __toCommonJS(utils_exports);
var regExpKeysToCheck = ["source", "global", "ignoreCase", "multiline", "unicode", "sticky", "lastIndex"];
var areObjectsEqual = (a, b, comparator) => {
  const aKeys = Object.keys(a);
  let index = aKeys.length;
  if (index !== Object.keys(b).length)
    return false;
  while (index-- > 0) {
    const key = aKeys[index];
    if (!Object.hasOwn(b, key) || !comparator(a[key], b[key]))
      return false;
  }
  return true;
};
var areArraysEqual = (a, b, comparator) => {
  let index = a.length;
  if (index !== b.length)
    return false;
  while (index-- > 0) {
    if (!comparator(a[index], b[index]))
      return false;
  }
  return true;
};
var areRegExpsEqual = (a, b, comparator) => {
  return !regExpKeysToCheck.some((key) => a[key] !== b[key]);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  areArraysEqual,
  areObjectsEqual,
  areRegExpsEqual
});
